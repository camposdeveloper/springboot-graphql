type Motorcycle {
	id: ID
	model: String
	manufacturer: Manufacturer
}

input MotorcycleInput {
	id: ID
	model: String!
	manufacturer: ManufacturerInput!
}

type Manufacturer {
	id: ID
	name: String
	contact: Contact
	address: Address
}

input ManufacturerInput {
	id: ID
	name: String!
	contactId: Int!
	addressId: Int!
}

type Contact {
	id: ID
	email: String
	telephone: String
	cellphone: String
}

input ContactInput {
	id: ID
	email: String!
	telephone: String!
	cellphone: String!
}

type Address {
	id: ID
	type: String
	name: String
	number: Int
	neighborhood: String
	city: String
	state: String
	country: String
}

input AddressInput {
	id: ID
	type: String
	name: String
	number: Int
	neighborhood: String
	city: String
	state: String
	country: String
}

type Mutation {

	# Mutation for Motorcycle
	saveMotorcycle(moto: MotorcycleInput!): Motorcycle
	
	# Mutation for Manufacturer
	saveManufacturer(manufacturer: ManufacturerInput!): Manufacturer
	
	# Mutation for Contact
	saveContact(contact: ContactInput): Contact
	
	# Mutation for Address
	saveAddress(address: AddressInput): Address
	
}
	
type Query {

	# Query for api
	getStatus: String
	
	# Queries for Motorcycle
	findMotorcycle: [Motorcycle]
	findMotorcycleById(id: Int!): Motorcycle
	
	# Queries for Manufacturer
	findManufacturer: [Manufacturer]
	findManufacturerById(id: Int!): Manufacturer
	
	# Queries for Contact
	findContact: [Contact]
	findContactById(id: Int): Contact
	
	# Queries for Address
	findAddress: [Address]
	findAddressById(id: Int): Address
	
	# Queries for tests
	getListString (list: [String]): [String]
	getListInteger(list: [Int]   ): [Int]
	
}